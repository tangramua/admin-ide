
# A repository object from the GitHub API. This uses the exact field names returned by the
# GitHub API for simplicity, even though the convention for GraphQL is usually to camel case.
type GitRepository @cacheControl(maxAge:240){
  # Just the name of the repository, e.g. GitHunt-API
  name: String!
  # The full name of the repository with the username, e.g. apollostack/GitHunt-API
  full_name: String!
  # The description of the repository
  description: String
  # The link to the repository on GitHub
  html_url: String!
  # The number of people who have starred this repository on GitHub
  stargazers_count: Int!
  # The number of open issues on this repository on GitHub
  open_issues_count: Int
  # The owner of this repository on GitHub, e.g. apollostack
  owner: GitUser
}

# A user object from the GitHub API. This uses the exact field names returned from the GitHub API.
type GitUser @cacheControl(maxAge:240){
  # The name of the user, e.g. apollostack
  login: String!
  # The URL to a directly embeddable image for this user's avatar
  avatar_url: String!
  # The URL of this user's GitHub page
  html_url: String!
}

type GitServiceCloneLinks {
  ssh: String
  https: String
}

type GitServiceCommit {
  id: String
  message: String
  updatedAt: String
  createdAt: String
}

type GitProfile {
  id: String
  provider: String
}

type GitServiceRepository {
  id: String
  url: String
  name: String
  path: String
  owner: String
  avatar: String
  private: Boolean
  createdAt: String
  updatedAt: String
  description: String
  clone: GitServiceCloneLinks
  branches: [GitServiceBranch]
}

type GitServiceBranch {
  name: String
  commit: GitServiceCommit
}

input IUserInput {
  nickname: String
}

input IGitServiceInput {
  path: String
  query: String
  user: IUserInput
  provider: String!
  repository: String
}

type GitServicePullRequest {
  id: String
  merged: String
  updatedAt: String
  createdAt: String
  commit: GitServiceCommit
}

type GitStateRow {
  user: String
  status: String
  access_token: String
}

type GitProvidersState {
  ok: Boolean
  gitlab: GitStateRow
  github: GitStateRow
  bitbucket: GitStateRow
}

extend type Query {
  getGitProviders: [String]
  getGitProfiles: [GitProfile]
  getGitProvidersState: GitProvidersState
  getGitBranches(input: IGitServiceInput!): [GitServiceBranch]
  getGitRepositories(input: IGitServiceInput!): [GitServiceRepository]
  getGitPullRequests(input: IGitServiceInput!): [GitServicePullRequest]
}